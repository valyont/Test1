#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
#include<string.h>
typedef struct
{
	unsigned int weight;
	unsigned int parent,lchild,rchild;
}HTNode,*HuffmanTree;
typedef char **HuffmanCode;
void Select(HuffmanTree HT,int i,int *s1,int *s2)
	//在HT[1..i]中选择parent为0且weight最小的两个结点，其序号分别为s1和s2
{
	int j,k;
	k=HT[i].weight;
	for(j=1;j<=i;j++)
		if(HT[j].weight<=k&&HT[j].parent==0)
			{
				k=HT[j].weight;
				*s1=j;
		     }
    HT[*s1].parent++;
	for(j=i;j>=1;j--)
		if(HT[j].parent==0)
			{
			   k=HT[j].weight;
			   break;
		    }
	 for(j=1;j<=i;j++)
		if(HT[j].weight<=k&&HT[j].parent==0)
			{
				k=HT[j].weight;
				*s2=j;
		     }
}//Select
void HuffmanCoding(HuffmanTree *HT,HuffmanCode *HC,int *w,int n)
	///w存放n个字符的权值(>0),构造赫夫曼树HT，并求出n个字符的赫夫曼编码HC
{
	int m,i,start,f,c,s1,s2;
	char *cd;
	HuffmanTree p;
	m=2*n-1;//m为赫夫曼树结点的总个数，n为叶子结点数
	*HT=(HuffmanTree)malloc((m+1)*sizeof(HTNode));//0号单元未用
	for(p=(*HT)+1,i=1;i<=n;i++,++p,++w)
	{
		(*p).weight=*w;
		(*p).parent=0;
		(*p).lchild=0;
		(*p).rchild=0;
	}
	for(;i<=m;++i,++p)
	{
		(*p).weight=0;
		(*p).parent=0;
		(*p).lchild=0;
		(*p).rchild=0;
	}
	for(i=n+1;i<=m;++i)
	{
		Select(*HT,i-1,&s1,&s2);//在HT[1..i-1]中选择parent为0且weight最小的两个结点，其序号分别为s1和s2
		(*HT)[s1].parent=i;
		(*HT)[s2].parent=i;
		(*HT)[i].lchild=s1;
		(*HT)[i].rchild=s2;
		(*HT)[i].weight=(*HT)[s1].weight+(*HT)[s2].weight;
	}//建赫夫曼树
	*HC=(HuffmanCode)malloc((n+1)*sizeof(char *));//分配n个字符编码的头指针向量
	cd=(char *)malloc(n*sizeof(char));//分配求编码的工作空间
	cd[n-1]='\0';//编码结束符
	for(i=1;i<=n;i++)
	{
		start=n-1;//编码结束符位置
		for(c=i,f=(*HT)[i].parent;f!=0;c=f,f=(*HT)[f].parent)//从叶子到根逆向求编码
			if((*HT)[f].lchild==c)
				cd[--start]='0';
			else
				cd[--start]='1';
		(*HC)[i]=(char *)malloc((n-start)*sizeof(char));
		strcpy((*HC)[i],&cd[start]);//从cd复制编码到HC
	}
	free(cd);//释放工作空间
}//HuffmanCoding
int position(int ch,int a[])
{
	int i,k=0;
	for(i=0;i<=ch;i++)
		if(a[i]!=0)
			k++;
	return k;
}//求出字符ch是文件中第几个频率不为0的字符（按ASCII码顺序）
FILE *compress(FILE *fp1,FILE *fp2)
{
	HuffmanTree HT,q;HuffmanCode HC;
	int i,a[256],b[256],ch,num,j,s,k,t;
	char *p;
	for(i=0;i<256;i++)
		a[i]=0;
	num=0;
	while(1)
	{
		ch=fgetc(fp1);
		if(feof(fp1)) break;
		  a[ch]++;
		num++;//统计文件中字符的个数
	}
	j=0;
	for(i=0;i<256;i++)
		if(a[i]!=0)
		{
			b[j]=a[i];
			j++;
		}
	if(j==0)
	{
		printf("该文件为空文件，不需压缩。\n");
		system("pause");
	    exit(0);
	}
	else 
	{
		fprintf(fp2,"%d ",num);
		fprintf(fp2,"%d",j);
		for(i=0;i<256;i++)
		   if(a[i]!=0)
             fprintf(fp2,"%c",i);
		for(i=0;i<256;i++)
		 if(a[i]!=0)
           fprintf(fp2,"%d ",a[i]);
	if(j>1)
	{
    HuffmanCoding(&HT,&HC,b,j);//数组b[]存放j个字符的权值(>0),构造赫夫曼树HT，并求出j个字符的赫夫曼编码HC
   /* printf("%d  %d  %d  \n",HT[2*j-1].lchild,HT[2*j-1].rchild,HT[2*j-1].weight);*/
	 j=s=0;
	 rewind(fp1);//使位置指针重新返回到文件的开头
     while(1)
	 {
		ch=fgetc(fp1);
		if(feof(fp1)) break;
		k=position(ch,a);//字符ch是文件中第k个频率不为0的字符（按ASCII码顺序）
		for(p=HC[k];*p!='\0';p++)
		{
			t=*p-'0';
			s=s<<1;
			s=s+t;
			j++;
			if(j==8)//当编码数为8时将其作为一个字节存入到压缩文件中
				{
					fputc(s,fp2);
					s=0;
					j=0;
			    }//if
		}//for
      }//while
   if(j<8)
	  {
		  s=s<<(8-j);
		 fputc(s,fp2);
      }//将不足8位的编码用0补齐
	 }//if
   fclose(fp1);
   fclose(fp2);
   }//else
   return(fp2);
}//yasuo
void decompress(FILE *fp2,FILE *fp3)
{
   int i,j,n,l,ch,d[8],number,c,w[256];
   char f[256];
   HuffmanTree HT,q;HuffmanCode HC;
   fscanf(fp2,"%d",&number);
   fscanf(fp2,"%d",&n);
   for(i=1;i<=n;i++)
      fscanf(fp2,"%c",&f[i]);
   for(i=0;i<n;i++)
	  fscanf(fp2,"%d",&w[i]);
   if(n==1)
	  for(i=0;i<w[0];i++)
		fputc(f[1],fp3);
   else
   {
    HuffmanCoding(&HT,&HC,w,n);
   q=&HT[2*n-1];
   l=0;
   ch=fgetc(fp2);
   while(1)
	{
		ch=fgetc(fp2);
		if(feof(fp2)) break;
		i=7;
		while(i!=-1)
		{
			c=ch%2;
            ch=ch/2;
			d[i]=c;
			i--;
		}
		for(i=0;i<8;i++)
			{
			  if(q->lchild==0&&q->rchild==0)
				for(j=1;j<=n;j++)
					if(q==&HT[j])
					{
					   if(l<number)
						{
						   fprintf(fp3,"%c",f[j]);
						   l++;
						}
					   q=&HT[2*n-1];break;
				     }//if
			if(d[i]==0)
		      q=&HT[q->lchild];
			else
			  q=&HT[q->rchild];
		   }//for
    }//while
}//else
    fclose(fp2);
    fclose(fp3);
}//jieya
main(int argc,char *argv[])
{
	FILE *fp1,*fp2,*fp3;
	if(!strcmp(argv[1],"-c"))
	{
	  if((fp1=fopen(argv[2],"rb"))==NULL)
	    {
		 printf("cannot open file\n");
		 exit(0);
	     }
	   if((fp2=fopen(argv[3],"wb"))==NULL)
	  {
		printf("cannot open file\n");
		exit(0);
	   }
     fp2=compress(fp1,fp2);
	}
   else if(!strcmp(argv[1],"-d"))
     {
     if((fp2=fopen(argv[2],"rb"))==NULL)
	   {
		printf("cannot open file\n");
		exit(0);
	   }
     if((fp3=fopen(argv[3],"wb"))==NULL)
	   {
		printf("cannot open file\n");
		exit(0);
	   }
      decompress(fp2,fp3);
	}
   /*else if(!strcmp(argv[1],"help")
	   {
		   printf("文件压缩:Myzip.exe -c 要压缩的文件名 压缩后的文件名\n");
           printf("文件解压:Myzip.exe -d 要解压的文件名 解压后的文件名\n");
      }*/
   else
	   printf("命令行参数错误，请重新输入.\n");
   system("pause");
}//main